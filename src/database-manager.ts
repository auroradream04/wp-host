import { MySQLManager } from "./mysql-manager";
import { Config, SiteConfig, DeploymentResult } from "./types";

export class DatabaseManager {
  private mysqlManager: MySQLManager;
  private config: Config;

  constructor(config: Config) {
    this.config = config;
    this.mysqlManager = new MySQLManager(config.mysql);
  }

  /**
   * Initialize database manager and establish MySQL connection
   */
  async initialize(): Promise<void> {
    console.log("üóÑÔ∏è  Initializing Database Manager...");
    await this.mysqlManager.connect();

    // Get and display server information
    const serverInfo = await this.mysqlManager.getServerInfo();
    console.log(
      `‚úÖ Connected to MySQL ${serverInfo.version} at ${serverInfo.host}:${serverInfo.port}`,
    );
  }

  /**
   * Create databases and users for all sites in the configuration
   */
  async createAllDatabases(
    useExisting: boolean = false,
  ): Promise<DeploymentResult[]> {
    console.log(
      `\nüöÄ Starting database ${useExisting ? "setup" : "creation"} for ${this.config.sites.length} site(s)...`,
    );
    if (useExisting) {
      console.log("‚ÑπÔ∏è  Using existing databases when available");
    }

    const results: DeploymentResult[] = [];

    for (let i = 0; i < this.config.sites.length; i++) {
      const site = this.config.sites[i];
      console.log(
        `\nüì¶ [${i + 1}/${this.config.sites.length}] Processing: ${site.site_name}`,
      );

      try {
        const result = await this.createSiteDatabase(site, useExisting);
        results.push(result);

        if (result.status === "success") {
          console.log(
            `‚úÖ ${site.site_name}: Database setup completed successfully`,
          );
        } else {
          console.log(
            `‚ö†Ô∏è  ${site.site_name}: Database setup completed with warnings`,
          );
        }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : String(error);
        console.error(
          `‚ùå ${site.site_name}: Database setup failed - ${errorMessage}`,
        );

        results.push({
          site_name: site.site_name,
          status: "failed",
          errors: [errorMessage],
        });
      }
    }

    return results;
  }

  /**
   * Create database and user for a single site
   */
  async createSiteDatabase(
    site: SiteConfig,
    useExisting: boolean = false,
  ): Promise<DeploymentResult> {
    const databaseName = site.database_name!; // Auto-generated by config parser
    const username = site.db_user!; // Auto-generated by config parser
    const password = this.config.mysql.sharedDbPassword;

    try {
      if (useExisting) {
        // Use existing database or create if it doesn't exist
        await this.mysqlManager.createOrUseDatabase(
          databaseName,
          username,
          password,
          "localhost",
        );
      } else {
        // Use clean slate approach: drop and recreate everything fresh
        await this.mysqlManager.createDatabaseAndUserClean(
          databaseName,
          username,
          password,
          "localhost",
        );
      }

      // Test the connection
      const connectionTest = await this.mysqlManager.testDatabaseConnection(
        username,
        password,
        databaseName,
        "localhost",
      );

      if (!connectionTest) {
        throw new Error("Database connection test failed after creation");
      }

      return {
        site_name: site.site_name,
        status: "success",
        database_info: {
          database_name: databaseName,
          username: username,
          password: password,
          host: this.config.mysql.host,
          port: this.config.mysql.port,
        },
      };
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      throw new Error(
        `Database ${useExisting ? "setup" : "creation"} failed: ${errorMessage}`,
      );
    }
  }

  /**
   * Check if database and user already exist for a site
   */
  async checkSiteDatabase(site: SiteConfig): Promise<{
    databaseExists: boolean;
    userExists: boolean;
    canConnect: boolean;
  }> {
    const databaseName = site.database_name!;
    const username = site.db_user!;
    const password = this.config.mysql.sharedDbPassword;

    try {
      const databaseExists =
        await this.mysqlManager.databaseExists(databaseName);
      const userExists = await this.mysqlManager.userExists(
        username,
        "localhost",
      );

      let canConnect = false;
      if (databaseExists && userExists) {
        canConnect = await this.mysqlManager.testDatabaseConnection(
          username,
          password,
          databaseName,
          "localhost",
        );
      }

      return { databaseExists, userExists, canConnect };
    } catch (error) {
      console.error(
        `Error checking site database: ${error instanceof Error ? error.message : String(error)}`,
      );
      return { databaseExists: false, userExists: false, canConnect: false };
    }
  }

  /**
   * Generate database creation report
   */
  async generateReport(): Promise<void> {
    console.log("\nüìä Database Status Report");
    console.log("========================");

    for (let i = 0; i < this.config.sites.length; i++) {
      const site = this.config.sites[i];
      console.log(`\n${i + 1}. ${site.site_name}`);

      try {
        const status = await this.checkSiteDatabase(site);

        console.log(
          `   Database (${site.database_name}): ${status.databaseExists ? "‚úÖ Exists" : "‚ùå Missing"}`,
        );
        console.log(
          `   User (${site.db_user}@localhost): ${status.userExists ? "‚úÖ Exists" : "‚ùå Missing"}`,
        );
        console.log(
          `   Connection Test: ${status.canConnect ? "‚úÖ Success" : "‚ùå Failed"}`,
        );

        if (status.databaseExists && status.userExists && status.canConnect) {
          console.log(`   Status: üü¢ Ready for WordPress`);
        } else if (status.databaseExists || status.userExists) {
          console.log(`   Status: üü° Partially configured`);
        } else {
          console.log(`   Status: üî¥ Not configured`);
        }
      } catch (error) {
        console.log(`   Status: ‚ùå Error checking status`);
        console.log(
          `   Error: ${error instanceof Error ? error.message : String(error)}`,
        );
      }
    }
  }

  /**
   * Reset WordPress tables in all databases (keeps databases and users intact)
   * This is safer than full cleanup as it only removes WordPress data
   */
  async resetWordPressTables(): Promise<void> {
    console.log("\nüîÑ Resetting WordPress tables in all databases...");
    console.log(
      "‚ö†Ô∏è  WARNING: This will delete all WordPress data but keep databases and users!",
    );

    for (const site of this.config.sites) {
      const databaseName = site.database_name!;

      try {
        console.log(`\nüóëÔ∏è  Resetting WordPress tables for ${site.site_name}:`);

        // Check if database exists
        const dbExists = await this.mysqlManager.databaseExists(databaseName);
        if (!dbExists) {
          console.log(
            `   ‚ÑπÔ∏è  Database ${databaseName} doesn't exist, skipping`,
          );
          continue;
        }

        // Connect to the specific database
        const mysql = require("mysql2/promise");
        const connection = await mysql.createConnection({
          host: this.config.mysql.host,
          port: this.config.mysql.port,
          user: this.config.mysql.rootUser,
          password: this.config.mysql.rootPassword,
          database: databaseName,
        });

        // Get all tables that start with 'wp_'
        const [tables] = await connection.execute("SHOW TABLES LIKE 'wp_%'");

        if (Array.isArray(tables) && tables.length > 0) {
          console.log(
            `   üìä Found ${tables.length} WordPress tables to remove`,
          );

          // Disable foreign key checks to avoid dependency issues
          await connection.execute("SET FOREIGN_KEY_CHECKS = 0");

          // Drop each WordPress table
          for (const tableRow of tables) {
            const tableName = Object.values(tableRow as any)[0] as string;
            await connection.execute(`DROP TABLE IF EXISTS \`${tableName}\``);
            console.log(`   ‚úÖ Dropped table: ${tableName}`);
          }

          // Re-enable foreign key checks
          await connection.execute("SET FOREIGN_KEY_CHECKS = 1");

          console.log(
            `   ‚úÖ All WordPress tables removed from ${databaseName}`,
          );
        } else {
          console.log(`   ‚ÑπÔ∏è  No WordPress tables found in ${databaseName}`);
        }

        await connection.end();
      } catch (error) {
        console.error(
          `   ‚ùå Error resetting ${site.site_name}: ${error instanceof Error ? error.message : String(error)}`,
        );
      }
    }

    console.log("\n‚úÖ WordPress table reset completed.");
  }

  /**
   * Clean up (remove) databases and users for all sites
   * WARNING: This will delete all data!
   */
  async cleanupAllDatabases(): Promise<void> {
    console.log("\nüßπ Cleaning up databases and users...");
    console.log(
      "‚ö†Ô∏è  WARNING: This will permanently delete all databases and users!",
    );

    for (const site of this.config.sites) {
      const databaseName = site.database_name!;
      const username = site.db_user!;

      try {
        console.log(`\nüóëÔ∏è  Cleaning up ${site.site_name}:`);

        // Drop database if it exists - using IF EXISTS to avoid errors
        await this.mysqlManager.executeQuery(
          `DROP DATABASE IF EXISTS \`${databaseName}\``,
        );
        console.log(`   ‚úÖ Database ${databaseName} dropped (if it existed)`);

        // Drop user if it exists - using IF EXISTS to avoid errors
        await this.mysqlManager.executeQuery(
          `DROP USER IF EXISTS \`${username}\`@\`localhost\``,
        );
        console.log(`   ‚úÖ User ${username}@localhost dropped (if it existed)`);
      } catch (error) {
        console.error(
          `   ‚ùå Error cleaning up ${site.site_name}: ${error instanceof Error ? error.message : String(error)}`,
        );
      }
    }

    // Flush privileges after cleanup
    await this.mysqlManager.executeQuery("FLUSH PRIVILEGES");
    console.log("\n‚úÖ Cleanup completed. Privileges flushed.");
  }

  /**
   * Close database manager and disconnect from MySQL
   */
  async close(): Promise<void> {
    await this.mysqlManager.disconnect();
    console.log("‚úÖ Database Manager closed");
  }

  /**
   * Get database creation summary
   */
  getSummary(results: DeploymentResult[]): {
    total: number;
    successful: number;
    failed: number;
    skipped: number;
  } {
    const total = results.length;
    const successful = results.filter((r) => r.status === "success").length;
    const failed = results.filter((r) => r.status === "failed").length;
    const skipped = results.filter((r) => r.status === "skipped").length;

    return { total, successful, failed, skipped };
  }
}
